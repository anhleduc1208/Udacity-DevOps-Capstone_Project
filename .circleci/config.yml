# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  destroy-environment:
    description: Destroy all cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "network-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
jobs:
  linting:
    docker:
    - image: python:3.7.3-stretch

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "src/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            cd src
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "src/requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            cd src
            . venv/bin/activate
            make lint 

  docker:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.17
      - run:
          name: Build docker image
          command: |
            cd src
            docker build -t hello-world-py:latest .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag hello-world-py:latest $DOCKERHUB_USERNAME/hello-world-py:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/hello-world-py:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip

      - run:
          name: Ensure project network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=uda-capstone-project \
              --stack-name "network-&{CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WORKFLOW_ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure project Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=uda-capstone-project \
              --stack-name "cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WORKFLOW_ID="${CIRCLE_WORKFLOW_ID:0:7} \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 20m
      - destroy-environment
      # - run:
      #     name: Ensure Nodegroup exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file cloudformation/nodegroup.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup" \
      #         --region ${AWS_DEFAULT_REGION} \
      #         --parameter-overrides file://cloudformation/nodegroup-parameters.json \
      #         --capabilities CAPABILITY_NAMED_IAM
      # - run:
      #     name: Ensure management instances exists
      #     command: |
      #       aws cloudformation deploy \
      #         --template-file cloudformation/management.yml \
      #         --tags project=${ENVIRONMENT_NAME}-project \
      #         --stack-name "${ENVIRONMENT_NAME}-eks-management" \
      #         --region ${AWS_DEFAULT_REGION} \
      #         --parameter-overrides file://cloudformation/management-parameters.json \
      #         --output text >> ~/checkIfDeployed.txt
      #       cat ~/checkIfDeployed.txt
      # - run:
      #     name: Extract the IPs of the management instances for Ansible
      #     command: |
      #       echo [management] > ~/inventory.txt
      #       aws ec2 describe-instances \
      #         --region "${AWS_DEFAULT_REGION}" \
      #         --query 'Reservations[*].Instances[*].PublicIpAddress' \
      #         --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-management*" \
      #         --output text >> ~/inventory.txt
      #       cat ~/inventory.txt
      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - inventory.txt
      #       - checkIfDeployed.txt
      

  destroy-infra-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Destroy environments
          command: |
            aws cloudformation delete-stack --stack-name "network-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "cluster-${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  default:
    jobs:
      - linting
      # - docker:
      #     requires:
      #       - linting
          # filters:
          #   branches:
          #     only: [ master ]
      - deploy-infrastructure:
          requires:
            - linting
          # filters:
          #   branches:
          #     only: [ master ]
      - destroy-infra-test:
          requires:
            - deploy-infrastructure
      # - configure-infrastructure:
      #     requires:
      #       - deploy-infrastructure
      # - configure-cluster:
      #     requires:
      #       - configure-infrastructure
      #       - upload-docker
      # - deploy-docker:
      #     requires:
      #       - configure-cluster