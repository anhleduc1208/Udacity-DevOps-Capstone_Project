# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

commands:
  destroy-environment:
    description: Destroy all cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        default: "${CIRCLE_WORKFLOW_ID:0:7}"
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "nodegroup-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "cluster-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "network-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "agency-<<parameters.workflow_id>>"
jobs:
  linting:
    docker:
    - image: python:3.7.3-stretch

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "src/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            cd src
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "src/requirements.txt" }}

      # run lint!
      - run:
          name: run lint
          command: |
            cd src
            . venv/bin/activate
            make lint 

  build-and-upload-docker-image:
    docker:
      - image: circleci/golang:1.15
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.17
      - run:
          name: Build docker image
          command: |
            cd src
            docker build -t hello-world-py:latest .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag hello-world-py:latest $DOCKERHUB_USERNAME/hello-world-py:${CIRCLE_WORKFLOW_ID:0:7}
            docker push $DOCKERHUB_USERNAME/hello-world-py:${CIRCLE_WORKFLOW_ID:0:7}

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure project network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=uda-capstone-project \
              --stack-name "network-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowId="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure project Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=uda-capstone-project \
              --stack-name "cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowId="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 20m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=uda-capstone-project \
              --stack-name "nodegroup-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowId="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure agency instance exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/agency.yml \
              --tags project=uda-capstone-project \
              --stack-name "agency-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowId="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Find the IPs of the agency instance for Ansible inventory
          command: |
            echo [agency] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${CIRCLE_WORKFLOW_ID:0:7}-agency" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
      - destroy-environment
      
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f9:b4:c1:38:93:de:58:bb:28:b0:6b:7c:2c:c6:6c:90"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            pip install awscli
            apk add --update ansible
            apk add --update tar
            apk add --update gzip
      - run:
          name: Configure server
          command: |
              cat ~/inventory.txt
              cd ansible
              export WORKFLOW_ID=${CIRCLE_WORKFLOW_ID:0:7}
              ansible-playbook -i ~/inventory.txt configure-server.yml
      - destroy-environment  

  deploy-k8s:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "f9:b4:c1:38:93:de:58:bb:28:b0:6b:7c:2c:c6:6c:90"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Apply Deploy and Service to EKS cluster
          command: |
              cat ~/inventory.txt
              cd ansible
              ansible-playbook -i ~/inventory.txt deploy-k8s.yml
              
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
              cat ~/inventory.txt
              echo "Wait 60 seconds..."
              sleep 60
      - run:
          name: Get the LoadBalancer's DNS name
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt get-elb-dns.yml
            cat ~/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_dns.txt
      - destroy-environment
      

  
  destroy-infra-test:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Destroy environments
          command: |
            aws cloudformation delete-stack --stack-name "agency-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "nodegroup-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "cluster-${CIRCLE_WORKFLOW_ID:0:7}"
            aws cloudformation delete-stack --stack-name "network-${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  default:
    jobs:
      - linting
      - build-and-upload-docker-image:
          requires:
            - linting
      #     # filters:
      #     #   branches:
      #     #     only: [ master ]
      - deploy-infrastructure:
          requires:
            - linting
          # filters:
          #   branches:
          #     only: [ master ]
      - configure-infrastructure:
          requires:
            - deploy-infrastructure
      - deploy-k8s:
          requires:
            - configure-infrastructure
            - build-and-upload-docker-image
      # - destroy-infra-test:
      #     requires:
      #       - configure-infrastructure
      # - deploy-docker:
      #     requires:
      #       - configure-cluster